import jsonimport randomfrom locust import betweenfrom redis_user import RedisUserfrom redis_user import redis_taskNAMES_TO_CACHE = 1000class RedisSampleUser(RedisUser):    wait_time = between(0.0, 0.0)    def __init__(self, environment):        super().__init__(environment)        self.name_cache = []    def generate_new_entity(self):        # TODO: adjust proper message and all that stuff required        store_id = self.faker.pydecimal(min_value=0, max_value=10000)        key = "/entity/"        entity = {            'store_id': store_id,            'first_name': self.faker.first_name(),            'last_name': self.faker.last_name(),            'address': self.faker.street_address(),            'city': self.faker.city(),            'total_assets': self.faker.pydecimal(min_value=100, max_value=1000, right_digits=2)        }        return key, entity    def on_start(self):        self.name_cache = []    @redis_task(weight=1)    def insert_single_entity(self):        key, entity = self.generate_new_entity()        if len(self.name_cache) < NAMES_TO_CACHE:            self.name_cache.append(key)        else:            if random.randint(0, 9) == 0:                self.name_cache[random.randint(0, len(self.name_cache) - 1)] = key        self.redis.put_entry(key=key, value=json.dumps(entity))    @redis_task(weight=1)    def get_entity(self):        if not self.name_cache:            return        cached_names = random.choice(self.name_cache)        self.redis.get_entry(key=cached_names)